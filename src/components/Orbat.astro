---
const sections = [
  {
    id: "6-1-0",
    title: "Company HQ",
    description:
      "Leads and coordinates all company-level operations, logistics, and administration.",
  },
  {
    id: "6-0-2",
    title: "Battalion Intelligence",
    description:
      "The Zeus team, controls the flow of missions, responds to errors and creates immersive combat scenarios.",
  },
  {
    id: "6-0-3",
    title: "Valkyrie Wing",
    description:
      "Provides aerial reconnaissance and close air support with rotary assets.",
  },
  {
    id: "6-0-4",
    title: "Reconnaissance Support Section",
    description:
      "Conducts forward reconnaissance missions and target acquisition.",
  },
  {
    id: "6-0-5",
    title: "Logistics Support Section",
    description:
      "Handles supply, transport and resupply for the entire battalion.",
  },
  {
    id: "1-1-0",
    title: "1 Platoon Headquarters",
    description:
      "Command element for 1 Platoon, directing subordinate fireteams.",
  },
  {
    id: "1-2-0",
    title: "2 Platoon Headquarters",
    description:
      "Command element for 2 Platoon, directing subordinate fireteams.",
  },
  {
    id: "1-1-1",
    title: "Alpha Multi-Purpose Combat Section",
    description:
      "A general-purpose rifle section for assault, defence and patrol tasks.",
  },
  {
    id: "1-1-2",
    title: "Bravo Multi-Purpose Combat Section",
    description:
      "A general-purpose rifle section for assault, defence and patrol tasks.",
  },
  {
    id: "1-1-3",
    title: "Charlie Multi-Purpose Combat Section",
    description:
      "A general-purpose rifle section for assault, defence and patrol tasks.",
  },
  {
    id: "1-2-1",
    title: "Alpha Multi-Purpose Combat Section",
    description:
      "A general-purpose rifle section for assault, defence and patrol tasks.",
  },
  {
    id: "1-2-2",
    title: "Bravo Manoeuvre Support Section",
    description: "A general-purpose rifle section for assault, defence and patrol tasks.",
  },
  {
    id: "1-2-4",
    title: "Delta Direct Fire Support Weapons",
    description: "Operates direct-fire support systems (MMGs, HMGs, Javlins).",
  },
];

const detachIds = ["6-0-2", "6-0-3", "6-0-4", "6-0-5"];
const onePltIds = ["1-1-0", "1-1-1", "1-1-2", "1-1-3"];
const twoPltIds = ["1-2-0", "1-2-1", "1-2-2", "1-2-4"];
---

<section
  id="orbat"
  class="relative w-full bg-cover bg-center px-4 sm:px-6 py-26"
  style="background-image: url('/Screen4.png');"
>
  <!-- Top & Bottom Blurs + Overlay -->
  <div
    class="absolute top-0 left-0 w-full h-24 bg-gradient-to-b from-black/60 to-transparent z-10 pointer-events-none"
  >
  </div>
  <div
    class="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-black/60 to-transparent z-10 pointer-events-none"
  >
  </div>
  <div class="absolute inset-0 bg-black/60 z-0 pointer-events-none"></div>

  <div
    class="relative z-10 flex flex-col items-center justify-start w-full space-y-8"
  >
    <!-- Heading -->
    <h2
      class="orbat-fade-in opacity-0 translate-y-6 transition-all duration-700 text-white text-2xl sm:text-3xl font-bold text-center font-mono"
    >
      Our ORBAT Structure
    </h2>

    <!-- Company HQ Card -->
    <div
      class="orbat-fade-in opacity-0 translate-y-6 transition-all duration-700 w-full flex justify-center px-2"
    >
      <div
        class="orbat-card group bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg overflow-hidden transition-all duration-300 w-full max-w-md"
      >
        <button
          class="orbat-toggle flex justify-between items-center w-full px-4 py-3 text-white font-semibold hover:cursor-pointer transition-transform hover:scale-105 active:scale-100"
        >
          <span>6-1-0 — Company HQ</span>
          <svg
            class="chevron w-4 h-4 transform transition-transform duration-300"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        <div class="orbat-content px-4 pb-4 text-white font-mono">
          Leads and coordinates all company-level operations, logistics, and
          administration.
        </div>
      </div>
    </div>

    <!-- 3-Column Responsive Grid -->
    <div
      class="orbat-fade-in opacity-0 translate-y-6 transition-all duration-700 w-full max-w-6xl px-2 sm:px-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6"
    >
      <!-- Detachments Column -->
      <div class="space-y-4">
        <h3 class="text-white text-lg sm:text-xl font-semibold text-center">
          Detachments
        </h3>
        {
          detachIds.map((id) => {
            const sec = sections.find((s) => s.id === id);
            if (!sec) return null;
            return (
              <div class="orbat-card group bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg overflow-hidden transition-all duration-300 w-full max-w-md">
                <button class="orbat-toggle flex justify-between items-center w-full px-4 py-3 text-white font-semibold hover:cursor-pointer transition-transform hover:scale-105 active:scale-100">
                  <span>
                    {sec.id} — {sec.title}
                  </span>
                  <svg
                    class="chevron w-4 h-4 transform transition-transform duration-300"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>
                <div class="orbat-content px-4 pb-4 text-white">
                  {sec.description}
                </div>
              </div>
            );
          })
        }
      </div>

      <!-- 1 Platoon Column -->
      <div class="space-y-4">
        <h3 class="text-white text-lg sm:text-xl font-semibold text-center">
          1PLT
        </h3>
        {
          onePltIds.map((id) => {
            const sec = sections.find((s) => s.id === id);
            if (!sec) return null;
            return (
              <div class="orbat-card group bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg overflow-hidden transition-all duration-300 w-full max-w-md">
                <button class="orbat-toggle flex justify-between items-center w-full px-4 py-3 text-white font-semibold hover:cursor-pointer transition-transform hover:scale-105 active:scale-100">
                  <span>
                    {sec.id} — {sec.title}
                  </span>
                  <svg
                    class="chevron w-4 h-4 transform transition-transform duration-300"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>
                <div class="orbat-content px-4 pb-4 text-white">
                  {sec.description}
                </div>
              </div>
            );
          })
        }
      </div>

      <!-- 2 Platoon Column -->
      <div class="space-y-4">
        <h3 class="text-white text-lg sm:text-xl font-semibold text-center">
          2PLT
        </h3>
        {
          twoPltIds.map((id) => {
            const sec = sections.find((s) => s.id === id);
            if (!sec) return null;
            return (
              <div class="orbat-card group bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg overflow-hidden transition-all duration-300 w-full max-w-md">
                <button class="orbat-toggle flex justify-between items-center w-full px-4 py-3 text-white font-semibold hover:cursor-pointer transition-transform hover:scale-105 active:scale-100">
                  <span>
                    {sec.id} — {sec.title}
                  </span>
                  <svg
                    class="chevron w-4 h-4 transform transition-transform duration-300"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>
                <div class="orbat-content px-4 pb-4 text-white">
                  {sec.description}
                </div>
              </div>
            );
          })
        }
      </div>
    </div>
  </div>
</section>

<style>
  .orbat-content {
    overflow: hidden;
    max-height: 0;
    opacity: 0;
    transition:
      max-height 0.4s ease,
      opacity 0.4s ease;
    will-change: max-height, opacity;
  }
  .orbat-card.open .orbat-content {
    opacity: 1;
    max-height: 12rem;
  }
  /* rotate chevron when open */
  .orbat-card.open .chevron {
    transform: rotate(180deg);
  }
  .blur-transition {
    backdrop-filter: blur(6px);
    transition:
      backdrop-filter 0.6s ease,
      background-color 0.6s ease;
    background-color: rgba(255, 255, 255, 0.06);
  }
</style>

<script is:inline>
  // Fade in script
  if (typeof window !== "undefined") {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("opacity-100", "translate-y-0");
            entry.target.classList.remove("opacity-0", "translate-y-6");
          } else {
            entry.target.classList.remove("opacity-100", "translate-y-0");
            entry.target.classList.add("opacity-0", "translate-y-6");
          }
        });
      },
      { threshold: 0 }
    );

    document
      .querySelectorAll(".orbat-fade-in")
      .forEach((el) => observer.observe(el));

    // Drop down script
    document.querySelectorAll(".orbat-toggle").forEach((btn) => {
      btn.addEventListener("click", () => {
        const card = btn.closest(".orbat-card");
        const content = card.querySelector(".orbat-content");
        const isOpen = card.classList.contains("open");
        if (isOpen) {
          const h = content.scrollHeight;
          content.style.maxHeight = `${h}px`;
          void content.offsetHeight;
          content.style.maxHeight = "0";
          content.style.opacity = "0";
          content.addEventListener("transitionend", function handler(e) {
            if (e.propertyName === "max-height") {
              card.classList.remove("open");
              content.removeEventListener("transitionend", handler);
            }
          });
        } else {
          card.classList.add("open");
          const h = content.scrollHeight;
          content.style.maxHeight = `${h}px`;
          content.style.opacity = "1";
          content.addEventListener("transitionend", function handler(e) {
            if (e.propertyName === "max-height") {
              content.style.maxHeight = "12rem";
              content.removeEventListener("transitionend", handler);
            }
          });
        }
      });
    });
  }
</script>
